Kevin Vu | CS35L | Winter '16
lab4.txt
ldd --version to check GNU libc version 2.12
lnxsrv09

Premise: You're helping developing an OS and command set
	- The agency has some requirements though"
		- Applications must use the Unicode character “`” 
		- (grave accent, U+0060) only as a spacing accent character.
	- PROBLEM: Your app GNU Diffutils uses “`” as a quoting character 
		- “diff . -” outputs:
		- the diagnostic “diff: cannot compare `-' to a directory”
			- Misuse of  “`” !!!
	- NEED TO DO: Change Diffutils so it outputs:
		- “diff: cannot compare '-' to a directory” 
		- using an apostrophe (U+0027) for opening and closing quote
		- DONT USE: “‘” and “’” 

LAB:
- export PATH=/usr/local/cs/bin:$PATH to allow git use

01. Get a copy of the Diffutils repository, in Git format from the file
~eggert/src/gnu/diffutils on the SEASNet Servers/Savannah Repository
	- mkdir gitroot
	- cd gitroot
	- (Anon clone) git clone git://git.savannah.gnu.org/diffutils.git 

02. Get a log of changes to Diffutils’ master branch using the “git log”command
and put it into the file git-log.txt.
	- cd diffutils 
	- git log > git-log.txt

03. Generate a list of tags used for Diffutils using the “git tag” command, 
and put it into the file git-tags.txt
	- git tag > git-tags.txt


04.Find the commit entitled “maint: quote 'like this' or "like this", 
not `like this'”, and generate a patch for that commit, putting it into 
the file quote-patch.txt.

- Look through the git log for “maint: quote 'like this' or "like this.." 
- Find the commit Hash: commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
- Then, git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt

05. Check out version 3.0 of Diffutils from your repository.
	- git checkout v3.0
	- Puts you in detached HEAD state to be experimental
	- NOTE: If you want to create a new branch to retain commits
		:   git checkout -b new_branch_name


06. Use the patch command to apply quote-patch.txt to version 3.0. In some
cases it will not be able to figure out what file to patch; skip past those by
typing RETURN. Record any problems you had in applying the patch.
	- Apply the patch: patch -p1 < quote-patch.txt
	- RET, y, RET | three times

07. Use the git status command to get an overview of what happened.
	- Overview through: git status
	- Output to see what happened: 
		#	modified:   NEWS
		#	modified:   README
		#	modified:   TODO
		#	modified:   doc/diagmeet.note
		#	modified:   ms/config.bat
		#	modified:   ms/config.site
		#	modified:   po/en.po
		#	modified:   src/analyze.c
		#	modified:   src/cmp.c
		#	modified:   src/context.c
		#	modified:   src/diff.c
		#	modified:   src/diff.h
		#	modified:   src/diff3.c
		#	modified:   src/dir.c
		#	modified:   src/ifdef.c
		#	modified:   src/io.c
		#	modified:   src/sdiff.c
		#	modified:   src/side.c
		#	modified:   src/system.h
		#	modified:   src/util.c
		#	modified:   tests/help-version
		#
		# Untracked files:
		# (use "git add <file>..." to include in what will be committed)
		#
		#	NEWS.orig
		#	README-hacking.orig
		#	README-hacking.rej
		#	README.orig
		#	README.rej
		#	cfg.mk.orig
		#	cfg.mk.rej
		#	git-log.txt
		#	git-tags.txt
		#	ms/config.site.orig
		#	quote-patch.txt
		#	src/cmp.c.orig
		#	src/context.c.orig
		#	src/diff.c.orig
		#	src/diff.c.rej
		#	src/diff.h.orig
		#	src/diff3.c.orig
		#	src/diff3.c.rej
		#	src/dir.c.orig
		#	src/sdiff.c.orig
		#	src/system.h.orig
		#	src/util.c.orig
		#	tests/help-version.orig

08. Learn how to use the Emacs functions vc-diff (C-x v =) and
vc-revert (C-x v u). When you're in the *vc-diff* buffer generated by vc-diff,
use describe-mode (C-h m) to find out the Emacs functions that you can use 
there, and in particular learn how to use the diff-apply-hunk (C-c C-a) and 
diff-goto-source (C-c C-c) functions.

I tested with the emacs functions to get familiar with them, especially
vc-diff (C-x v =) and vc-revert (C-x v u)
diff-apply hunk -> C-c C-a
revert the hunk -> C-u C-c C-a
Move to next hunk  -> M-n
Go to source ------> C-c C-c
Previous hunk ------> M-p
Highlight change ------> C-c C-b


09. Use Emacs to revert all the changes to files other than .c files, 
since you want only changes to .c files. Also, and don't forget this part:
undo all the changes to .c files other than changes to character string 
constants, as the character-string changes are the only changes that you want
;this may require editing some files by hand.
Use vc-diff and vc- revert on each filename

git checkout -- NEWS README TODO doc/diagmeet.note ms/config.bat ms/config.bat
ms/config.site po/en.po src/diff.h src/system.h tests/help-version

git status to make sure they're off the modified list
Then use emacs to edit all the other .c files 
- For comments, you need keep them as backticks -> `' as requested by customer
- For character string constants, you need to have single quotes.
- emacs filename
- (vc-diff) C-x v =  to generate diff buffer
	* If the hunk modifies a comment, revert the hunk : C-u C-c C-a
	* If it doesn't: Ignore it, and M-n to move through hunks

10. Use Emacs to examine the files src/*.c.rej carefully, 
and copy rejected patches into the corresponding .c files as needed.
- View file and change patch by hand by copying rejected patches into
their original c files
- emacs src/diff.c.rej
- emacs src/diff3.c.rej

11. Remove all untracked files that git status warns you about, 
since you don’t plan on adding any files in your patch.
 git clean -f 

12. When you’re done with the above, git status should report 
a half-dozen modified files, and git diff should output a patch that is three
or four hundred lines long. Put that patch into a file quote-3.0-patch.txt.
git status
git diff > ~/quote-3.0-patch.txt 


13. Build the resulting modified version of Diffutils, using the commands 
described in the file README-hacking, skipping the part about CVS; CVS is 
obsolescent. (If you are building on lnxsrv07 or lnxsrv09 or any other host
that is using version 2.16 or later of the GNU C Library, you will need to
apply an additional patch after running ./bootstrap and before running 
./configure, because glibc 2.16 removed the obsolete and dangerous gets 
function declared by a Diffutils header.) Verify that Diffutils does the right
thing with the “diff . -” scenario, as well as with “diff --help”.

- Building the modified diffutils
	- ./bootstrap
	- ./configure
	- make
	- make check
	- cd src
	- diff . -	-> diff: cannot compare '-' to a directory
	- diff --help -> 
.. FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'. ..

14. Do a sanity test using the modified version of Diffutils that you just 
built, by using the just-built diff to compare the source code of Diffutils 3.0
to the source code of your modified version. Put the former source code into a
directory diffutils-3.0 and the latter source code into a directory 
diffutils-3.0-patch, and run your implementation of diff with the command 
“D/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt”, 
where the D is the directory containing your diff implementation.

Do these series of steps along with getting the former source code:
cd ~/gitroot
mkdir diffutils-3.0
mkdir diffutils-3.0-patch
cd diffutils
cd src
cp * ../../diffutils-3.0-patch
git checkout -f v3.0
cp * ../../diffutils-3.0
cd ~/gitroot

diffutils-3.0-patch/diff -pru diffutils-3.0 diffutils-3.0-patch 
> quote-3.0-test.txt

15. Use diff to compare the contents of quote-3.0-test.txt and 
quote-3.0-patch.txt. Are the files identical? If not, are the differences 
innocuous?

diff quote-3.0-test.txt quote-3.0-patch.txt > testVpatch.diff
They are not completely identical, but
The differences are innocuous.
I would infer they came from branch creations and copying over directories

